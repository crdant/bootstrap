#!/usr/bin/env bash
BASEDIR=$(dirname $(dirname $0))
. "${BASEDIR}/lib/env.sh"
. "${BASEDIR}/lib/secrets.sh"
. "${BASEDIR}/lib/generate_passphrase.sh"
. "${BASEDIR}/lib/certificates.sh"

concourse_team=pcf
concourse_target=${env_id}-${concourse_team}
concourse_url=`concourse url`
pcf_concourse_user=pivotal

pcf_pipelines_remote="https://github.com/pivotal-cf/pcf-pipelines.git"
pcf_pipelines_local=${workdir}/pcf-pipelines
pcf_pipelines_version="v0.23.0"

pcf_install_pipeline="deploy-pcf"
pcf_install_pipeline_file="${workdir}/pcf-pipelines/install-pcf/gcp/pipeline.yml"
pcf_install_parameter_file="${workdir}/${env_id}-${pcf_install_pipeline}-params.yml"

pcf_upgrade_pipeline="upgrade-pcf"
pcf_upgrade_pipeline_file="${workdir}/pcf-pipelines/upgrade-tile/pipeline.yml"
pcf_upgrade_parameter_file="${workdir}/${env_id}-${pcf_upgrade_pipeline}-params.yml"

ops_dir=${BASEDIR}/pipelines/ops


pcf_service_account_name="pcf-${short_id}"
pcf_service_account="${pcf_service_account_name}@${project}.iam.gserviceaccount.com"
pcf_key_file=${key_dir}/${project}-${pcf_service_account_name}.json
pcf_dns_zone="pcf-${short_id}-zone"         # TO DO: See if I can get this from the Terraform state (or even the pipelines terraform file)
pcf_subdomain="pcf.${subdomain}"

terraform_statefile_bucket="${env_id}-bucket"

mysql_backup_bucket=${short_id}-mysql-backups
mysql_backup_schedule="0 0/72 * * *"

team_secret_root="concourse/${concourse_team}"
deploy_secret_root="concourse/${concourse_team}/${pcf_install_pipeline}"

prepare_concourse() {
  safe_auth_bootstrap
  concourse_admin="admin"
  admin_password=`safe get secret/bootstrap/concourse/${concourse_admin}:value`
  fly --target ${env_id} login --team-name main --ca-cert ${ca_cert_file} --concourse-url=${concourse_url} --username=${concourse_admin} --password=${admin_password}
  fly --target ${env_id} sync

  safe set secret/bootstrap/concourse/${pcf_concourse_user} value=`generate_passphrase 4`
  pcf_concourse_password=`safe get secret/bootstrap/concourse/${pcf_concourse_user}:value`
  fly --target ${env_id} set-team --team-name ${concourse_team} --basic-auth-username=${pcf_concourse_user} --basic-auth-password=${pcf_concourse_password}
}

concourse_login() {
  safe_auth_bootstrap
  pcf_concourse_password=`safe get secret/bootstrap/concourse/pivotal:value`
  fly --target ${concourse_target} login --team-name ${concourse_team} --ca-cert ${ca_cert_file} --concourse-url=${concourse_url} --username=${pcf_concourse_user} --password=${pcf_concourse_password}
}

service_accounts () {
  echo "Creating a service account for PCF..."

  gcloud iam service-accounts --project "${project}" create "${pcf_service_account_name}" --display-name "PCF Bootstraped by BOSH Boot Loader (bbl) and Concourse" --no-user-output-enabled
  gcloud projects add-iam-policy-binding "${project}" --member "serviceAccount:${pcf_service_account}" --role "roles/editor" --no-user-output-enabled

  gcloud projects add-iam-policy-binding ${project} --member "serviceAccount:${pcf_service_account}" --role "roles/compute.instanceAdmin" --no-user-output-enabled
  gcloud projects add-iam-policy-binding ${project} --member "serviceAccount:${pcf_service_account}" --role "roles/compute.networkAdmin" --no-user-output-enabled
  gcloud projects add-iam-policy-binding ${project} --member "serviceAccount:${pcf_service_account}" --role "roles/compute.storageAdmin" --no-user-output-enabled
  gcloud projects add-iam-policy-binding ${project} --member "serviceAccount:${pcf_service_account}" --role "roles/storage.admin" --no-user-output-enabled
  gcloud projects add-iam-policy-binding ${project} --member "serviceAccount:${pcf_service_account}" --role "roles/cloudsql.admin" --no-user-output-enabled
  gcloud projects add-iam-policy-binding ${project} --member "serviceAccount:${pcf_service_account}" --role "roles/dns.admin" --no-user-output-enabled
  gcloud projects add-iam-policy-binding ${project} --member "serviceAccount:${pcf_service_account}" --role "roles/compute.securityAdmin" --no-user-output-enabled

  gcloud iam service-accounts --project "${project}" keys create "${pcf_key_file}"  --iam-account "${pcf_service_account}"
}

buckets () {
  echo "Creating storage buckets..."
  gsutil mb -l ${storage_location} gs://${terraform_statefile_bucket}
  gsutil acl ch -u ${service_account}:O gs://${terraform_statefile_bucket}
  gsutil versioning set on gs://${terraform_statefile_bucket}

  gsutil mb -l ${storage_location} gs://${mysql_backup_bucket}
  gsutil acl ch -u ${service_account}:O gs://${mysql_backup_bucket}
  gsutil versioning set on gs://${mysql_backup_bucket}
}

download () {
  # TODO: Switch to Pivnet?
  pivnet login --api-token ${PIVNET_TOKEN}
  pivnet download-product-files --product-slug pcf-automation --release-version ${pcf_pipelines_version} --download-dir ${workdir} --glob "pcf-pipelines-${pcf_pipelines_version}.tgz" --accept-eula
  tar -xzf "${workdir}/pcf-pipelines-${pcf_pipelines_version}.tgz" -C "${workdir}"
  modernize_pipeline
  adapt_pipeline
}

modernize_pipeline() {
  sed -i -e 's/{{/((/g' "${pcf_install_pipeline_file}"
  sed -i -e 's/}}/))/g' "${pcf_install_pipeline_file}"
  sed -i -e 's/{{/((/g' "${pcf_upgrade_pipeline_file}"
  sed -i -e 's/}}/))/g' "${pcf_upgrade_pipeline_file}"
}

adapt_pipeline() {
  ops_file_args="$(find ${ops_dir}/*.yml | sort | sed 's/^/-o /' | xargs)"
  cat "${pcf_install_pipeline_file}.orig" | yaml-patch ${ops_file_args} > ${pcf_install_pipeline_file}
}

safe_auth () {
  jq --raw-output '.auth.client_token' ${key_dir}/conrad-${env_id}-token.json | safe auth token
}

get_deploy_secret () {
  local secret="${1}"

  if  [ ${secret} == "concourse" ] ; then
    safe_auth_bootstrap
    safe get secret/bootstrap/concourse/pivotal:value
    return
  fi

  safe_auth
  safe get ${deploy_secret_root}/${secret}:value
}

get_team_secret () {
  local secret="${1}"

  if  [ ${secret} == "concourse" ] ; then
    safe_auth_bootstrap
    safe get secret/bootstrap/concourse/pivotal:value
    return
  fi

  safe_auth
  safe get ${team_secret_root}/${secret}:value
}

get_credential () {
  local product=${1}
  local credential=${2}
  local field=${3}
  if [ -z "${field}" ] ; then
    field="password"
  fi
  credential=$(om -k --target https://opsman.${pcf_subdomain} --username `safe get ${team_secret_root}/opsman_admin_username:value` --password `safe get ${team_secret_root}/opsman_admin_password:value` --skip-ssl-validation credentials --product-name ${product} --credential-reference ${credential} --credential-field ${field})
  echo $credential
}

ssl_certificates () {
  echo "Creating SSL certificate for ERT..."

  common_name="${pcf_subdomain}"
  org_unit="Continuous Delivery"

  request_certificate ${common_name} ${org_unit} --domain
  echo "SSL certificate for ERT created and stored at ${ca_dir}/${common_name}.crt, private key stored at ${ca_dir}/${common_name}.key."
}

secrets () {
  safe_auth

  safe set ${team_secret_root}/gcp_service_account_key value="$(cat ${pcf_key_file})"

  # N.B. set these two on your own, No API for them
  # safe set ${deploy_secret_root}/gcp_storage_access_key value=
  # safe set ${deploy_secret_root}/gcp_storage_secret_key:
  safe set ${team_secret_root}/git_private_key value="$(cat ${HOME}/.ssh/concourse_github)"
  safe set ${team_secret_root}/pivnet_token value=${PIVNET_TOKEN}
  safe set ${team_secret_root}/opsman_admin_username value=admin
  safe gen ${team_secret_root}/opsman_admin_password value

  # store the certificates we generated
  create_certificate "${env_id} Cloud Foundry" \
    --domain "${pcf_subdomain}" --domain "*.cfapps.${pcf_subdomain}" --domain "*.login.sys.${pcf_subdomain}" \
    --domain "*.uaa.sys.${pcf_subdomain}" --domain "*.sys.${pcf_subdomain}"

  safe set ${deploy_secret_root}/pcf_ert_ssl_cert value="$(cat ${certbot_dir}/live/${env_id}\ Cloud\ Foundry/cert.pem)"
  safe set ${deploy_secret_root}/pcf_ert_ssl_key value="$(cat ${certbot_dir}/live/${env_id}\ Cloud\ Foundry/privkey.pem)"

  # credhub
  safe set /concourse/pcf/deploy-pcf/credhub_encryption_keys \
    value="[{ name: default, provider: internal, primary: true, key: { secret: $( generate_passphrase 6 | gmd5sum | awk '{ print $1 }') } }]"

  # Usernames must be 16 characters or fewer
  safe set ${deploy_secret_root}/db_diego_username value=pcf-diego
  safe gen ${deploy_secret_root}/db_diego_password value
  safe set ${deploy_secret_root}/db_notifications_username value=pcf-notification
  safe gen ${deploy_secret_root}/db_notifications_password value
  safe set ${deploy_secret_root}/db_autoscale_username value=pcf-autoscale
  safe gen ${deploy_secret_root}/db_autoscale_password value
  safe set ${deploy_secret_root}/db_uaa_username value=uaa
  safe gen ${deploy_secret_root}/db_uaa_password value
  safe set ${deploy_secret_root}/db_app_usage_service_username value=pcf-app-usage
  safe gen ${deploy_secret_root}/db_app_usage_service_password value
  safe set ${deploy_secret_root}/db_ccdb_username value=pcf-ccdb
  safe gen ${deploy_secret_root}/db_ccdb_password value
  safe set ${deploy_secret_root}/db_routing_username value=pcf-routing
  safe gen ${deploy_secret_root}/db_routing_password value

  safe set ${deploy_secret_root}/db_accountdb_username value=pcf-accounts
  safe gen ${deploy_secret_root}/db_accountdb_password value
  safe set ${deploy_secret_root}/db_networkpolicyserverdb_username value=pcf-policy
  safe gen ${deploy_secret_root}/db_networkpolicyserverdb_password value
  safe set ${deploy_secret_root}/db_nfsvolumedb_username value=pcf-nfs
  safe gen ${deploy_secret_root}/db_nfsvolumedb_password value
  safe set ${deploy_secret_root}/db_silk_username value=pcf-silk
  safe gen ${deploy_secret_root}/db_silk_password value
  safe set ${deploy_secret_root}/db_locket_username value=pcf-locket
  safe gen ${deploy_secret_root}/db_locket_password value

  safe set ${deploy_secret_root}/db_credhub_username value=pcf-credhub
  safe gen ${deploy_secret_root}/db_credhub_password value
}

params() {
  cat <<PARAMS > ${pcf_install_parameter_file}

  # GCP project to create the infrastructure in
  gcp_project_id: ${project}

  # Identifier to prepend to GCP infrastructure names/labels
  gcp_resource_prefix: pcf-${short_id}

  # GCP region
  gcp_region: ${region}

  # GCP Zones
  gcp_zone_1: ${availability_zone_1}
  gcp_zone_2: ${availability_zone_2}
  gcp_zone_3: ${availability_zone_3}

  # Storage Location
  gcp_storage_bucket_location: ${storage_location}

  terraform_statefile_bucket: ${terraform_statefile_bucket}

  # Elastic Runtime Domain
  pcf_ert_domain: ${pcf_subdomain} # This is the domain you will access ERT with
  opsman_domain_or_ip_address: opsman.${pcf_subdomain} # This should be your pcf_ert_domain with "opsman." as a prefix

  ert_errands_to_disable: none

  # PCF Operations Manager minor version to install
  opsman_major_minor_version: ^2\.1\..*$

  # PCF Elastic Runtime minor version to install
  ert_major_minor_version: ^2\.1\..*$

  # ops man client info not needed if we're using admin username/password that we have set earlier
  # but parameters need to be present
  opsman_client_id: ""
  opsman_client_secret: ""

  # networking options
  container_networking_nw_cidr: 10.254.32.0/22
  internet_connected: false
  networking_poe_ssl_certs: []
  opsman_trusted_certs: []
  routing_tls_termination: "load_balancer"
  routing_custom_ca_certificates: []
  security_acknowledgement: "X"

  # configure routing
  router_tls_ciphers: "ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384"
  routing_disable_http: true

  # not using HA proxy, but need to have values for the pipeline to work
  haproxy_backend_ca:
  haproxy_forward_tls:
  haproxy_tls_ciphers:

  mysql_monitor_recipient_email: ${email} # Email address for sending mysql monitor notifications
  mysql_backups: s3   # Whether to enable MySQL backups. (disable|s3|scp)
  mysql_backups_s3_access_key_id: ((gcp_storage_access_key))
  mysql_backups_s3_bucket_name: ${mysql_backup_bucket}
  mysql_backups_s3_bucket_path:
  mysql_backups_s3_cron_schedule: ${mysql_backup_schedule}more
  mysql_backups_s3_endpoint_url: https://storage.googleapis.com
  mysql_backups_s3_secret_access_key: ((gcp_storage_secret_key))
  mysql_backups_scp_cron_schedule:
  mysql_backups_scp_destination:
  mysql_backups_scp_key:
  mysql_backups_scp_port:
  mysql_backups_scp_server:
  mysql_backups_scp_user:
PARAMS

  cat <<PARAMS > ${pcf_upgrade_parameter_file}
  product_version_regex: ^2\.1\..*$
  opsman_client_id: ""
  opsman_client_secret: ""
  opsman_domain_or_ip_address: ${opsman_domain_or_ip_address}
  iaas_type: ${iaas}
  product_slug: "elastic-runtime"
  product_globs: "*pivotal"
PARAMS

}

pipeline () {
  concourse_login
  fly --target ${concourse_target} set-pipeline --pipeline ${pcf_install_pipeline} \
    --config ${pcf_install_pipeline_file} --load-vars-from ${pcf_install_parameter_file}
  fly --target ${concourse_target} unpause-pipeline --pipeline ${pcf_install_pipeline}

  fly --target ${concourse_target} set-pipeline --pipeline ${pcf_upgrade_pipeline} \
  --config ${pcf_upgrade_pipeline_file} --load-vars-from ${pcf_upgrade_parameter_file}
}

trigger() {
  job="${1}"
  echo "Triggering job ${1}"
  fly --target ${concourse_target} trigger-job -j ${pcf_install_pipeline}/${job}
  fly --target ${concourse_target} watch -j ${pcf_install_pipeline}/${job}
}

hijack() {
  job="${1}"
  echo "Hijacking job ${1}"
  fly --target ${concourse_target} hijack -j ${pcf_install_pipeline}/${job}
}


bootstrap_terraform() {
  echo "Bootstrapping PCF infrastructure..."
  trigger "bootstrap-terraform-state"
}

create_infrastructure () {
  echo "Creating PCF infrastructure..."
  trigger "create-infrastructure"
  dns
}

dns () {
  # TODO: trap errors and delete transaction file for sanity (mayhaps just rollback with gcloud dns)
  echo "Delegating DNS..."
  local name_servers=( `gcloud dns managed-zones describe "${pcf_dns_zone}" --format json --project=${project} | jq -r  '.nameServers | join(" ")'` )
  local transaction_file="${workdir}/pcf-dns-transaction-${pcf_dns_zone}.xml"

  gcloud dns record-sets transaction start -z "${dns_zone}" --transaction-file="${transaction_file}" --no-user-output-enabled --project=${project}

  gcloud dns record-sets transaction add -z "${dns_zone}" --name "${pcf_subdomain}" --ttl "${dns_ttl}" --type NS "${name_servers[0]}" --transaction-file="${transaction_file}" --no-user-output-enabled --project=${project}
  gcloud dns record-sets transaction add -z "${dns_zone}" --name "${pcf_subdomain}" --ttl "${dns_ttl}" --type NS "${name_servers[1]}" --transaction-file="${transaction_file}" --no-user-output-enabled --project=${project}
  gcloud dns record-sets transaction add -z "${dns_zone}" --name "${pcf_subdomain}" --ttl "${dns_ttl}" --type NS "${name_servers[2]}" --transaction-file="${transaction_file}" --no-user-output-enabled --project=${project}
  gcloud dns record-sets transaction add -z "${dns_zone}" --name "${pcf_subdomain}" --ttl "${dns_ttl}" --type NS "${name_servers[3]}" --transaction-file="${transaction_file}" --no-user-output-enabled --project=${project}

  gcloud dns record-sets transaction execute -z "${dns_zone}" --transaction-file="${transaction_file}" --no-user-output-enabled --project=${project}
}

configure_director() {
  echo "Configuring Ops Manger Director..."
  trigger "configure-director"
}

install() {
  bootstrap_terraform
  create_infrastructure
  configure_director
}

firewall() {
  gcloud --project "${project}" compute firewall-rules create "pcf-${short_id}-allow-om-ssh" --allow="tcp:22" --source-ranges="0.0.0.0/0" --target-tags="pcf-${short_id}-opsman" --network="pcf-${short_id}-virt-net"
}

ldap () {
  ldap_url=`ldap url`
  ldap_host=`echo ${ldap_url} | cut -d: -f2 | sed -e 's#//##g'`
  ldap_cert=`cat ${key_dir}/ldap-${env_id}.crt | perl -pe 's#\n#\x5c\x5c\x6e#g'`

  safe_auth_bootstrap
  ldap_admin_password=`safe get secret/bootstrap/ldap/admin:value`
  ldap_admin_bindDN=`ldap binddn`

  domain_context=`ldap convert ${domain}`
  pcf_bindDN="pcf_${env_id},$domain_context"
  pcf_bind_password=`generate_passphrase 4`

  safe_auth
  safe set ${deploy_secret_root}/uaa_ldap_username value=${pcf_bindDN}
  safe set ${deploy_secret_root}/uaa_ldap_password value=${pcf_bind_password}

  pcf_bind_password_enc=`echo {SHA}$(echo -n ${pcf_bind_password} | openssl sha -sha256 -binary) | base64`
  LDAPTLS_REQCERT=never ldapadd -H `ldap tunnel_url` -D ${ldap_admin_bindDN} -w ${ldap_admin_password} -f <(
    cat <<LDIF
version: 1

dn: o=PCF,${domain_context}
objectClass: top
objectClass: organization
o: PCF

dn: ou=users,o=PCF,${domain_context}
objectclass: organizationalUnit
objectclass: top
description: Contains entries which describe Cloud Foundry users
ou: users

dn: ou=systems,o=PCF,${domain_context}
objectclass: organizationalUnit
objectclass: top
description: Contains entries for systems that have access to the directory
ou: systems

dn: cn=pcf_platform,ou=systems,o=PCF,${domain_context}
objectClass: person
objectClass: top
cn: pcf_platform
sn: PCF
userPassword:: ${pcf_bind_password_enc}

dn: ou=groups,o=PCF,${domain_context}
objectclass: organizationalUnit
objectclass: top
description: Contains entries which describe Cloud Foundry groups
ou: groups
LDIF
  )

  ldap_properties=$(
    jq -n \
      --arg ldap_url "${ldap_url}" \
      --arg domain_context "${domain_context}" \
      --arg pcf_bindDN ${pcf_bindDN} \
      --arg pcf_bind_password "${pcf_bind_password}" \
      --arg ldap_cert "${ldap_cert}" \
      --arg ldap_address "${ldap_host}" \
      --arg user_search_base "ou=users,o=PCF,$domain_context" \
      --arg group_search_base "ou=groups,o=PCF,$domain_context" \
      '
        {
          ".properties.uaa": {
            "value": "ldap"
          },
          ".properties.uaa.ldap.url": {
            "value": $ldap_url
          },
          ".properties.uaa.ldap.credentials": {
            "value": {
              "identity": $pcf_bindDN,
              "password": $pcf_bind_password
            }
          },
          ".properties.uaa.ldap.search_base": {
            "value": $user_search_base
          },
          ".properties.uaa.ldap.search_filter": {
            "value": "cn={0}"
          },
          ".properties.uaa.ldap.group_search_base": {
            "value": $group_search_base
          },
          ".properties.uaa.ldap.group_search_filter": {
            "value": "member={0}"
          },
          ".properties.uaa.ldap.server_ssl_cert": {
            "value": $ldap_cert
          },
          ".properties.uaa.ldap.server_ssl_cert_alias": {
            "value": $ldap_address
          },
          ".properties.uaa.ldap.mail_attribute_name": {
            "value": "mail"
          },
          ".properties.uaa.ldap.first_name_attribute": {
            "value": "givenName"
          },
          ".properties.uaa.ldap.last_name_attribute": {
            "value": "sn"
          }
        }
      '
  )

  om --target https://opsman.${pcf_subdomain} --username `safe get ${team_secret_root}/opsman_admin_username:value` \
      --password `safe get ${team_secret_root}/opsman_admin_password:value` --skip-ssl-validation \
    configure-product --product-name cf --product-properties "$ldap_properties"
}

wipe_env() {
  fly --target ${concourse_target} trigger-job -j ${pcf_install_pipeline}/wipe-env
  fly --target ${concourse_target} watch -j ${pcf_install_pipeline}/wipe-env
}


start () {
  tunnel

  for deployment in $(bosh -n -e ${short_id}-pcf deployments --json | jq --raw-output '.Tables[].Rows[].name'); do
    bosh -n  -e ${short_id}-pcf -d ${deployment} start
    bosh -n -e ${short_id}-pcf -d ${deployment} update-resurrection on
  done
}

stop () {
  tunnel

  for deployment in $(bosh -n -e ${short_id}-pcf deployments --json | jq --raw-output '.Tables[].Rows[].name'); do
    bosh -n -e ${short_id}-pcf -d ${deployment} update-resurrection off
    bosh -n -e ${short_id}-pcf -d ${deployment} stop --hard
  done
}

opsman_exec () {
  gcloud compute ssh --project ${project} "ubuntu@pcf-${short_id}-ops-manager" --zone ${availability_zone_1} --command "${1}"
}

exec_om () {
  safe_auth > /dev/null 2>&1
  exec om --target https://opsman.${pcf_subdomain} --username `safe get ${team_secret_root}/opsman_admin_username:value` \
      --password `safe get ${team_secret_root}/opsman_admin_password:value` --skip-ssl-validation $@
}

tunnel () {
  local port=$(netstat -aln | awk '
  $6 == "LISTEN" {
    if ($4 ~ "[.:][0-9]+$") {
      split($4, a, /[:.]/);
      port = a[length(a)];
      p[port] = 1
    }
  }
  END {
    srand()
    while (i = (44000 + int(rand() * 15000))){
      if ( !p[i]) {
        print i;
        exit 0;
      };
    };
  }')

  gcloud compute scp ubuntu@pcf-${short_id}-ops-manager:/var/tempest/workspaces/default/root_ca_certificate ${key_dir}/bosh-${short_id}-ca.crt --zone ${availability_zone_1} > /dev/null 2>&1
  gcloud compute ssh ubuntu@pcf-${short_id}-ops-manager --zone ${availability_zone_1} -- -f -N -o StrictHostKeyChecking=no -o ServerAliveInterval=300 -D ${port} > /dev/null 2>&1

  local bosh_cred="$(exec_om curl --silent --path /api/v0/deployed/director/credentials/bosh_commandline_credentials | jq --raw-output .credential)"
  local bosh_vars="${bosh_cred% *} BOSH_CA_CERT=${key_dir}/bosh-${short_id}-ca.crt BOSH_ALL_PROXY=socks5://localhost:${port}"

  eval "export ${bosh_vars}"
  bosh alias-env ${short-id}-pcf > /dev/null 2>&1
  bosh log-in > /dev/null 2>&1
  echo "export ${bosh_vars} BOSH_ENVIRONMENT=${short_id}-pcf"
}

teardown() {
  wipe_env
  fly --target ${concourse_target} destroy-pipeline -p "${pcf_install_pipeline}"

  gsutil rm -l ${storage_location} gs://${terraform_statefile_bucket}

  gcloud projects remove-iam-policy-binding "${project}" --member "serviceAccount:${pcf_service_account}" --role "roles/editor" --no-user-output-enabled

  gcloud projects remove-iam-policy-binding ${project} --member "serviceAccount:${pcf_service_account}" --role "roles/compute.instanceAdmin" --no-user-output-enabled
  gcloud projects remove-iam-policy-binding ${project} --member "serviceAccount:${pcf_service_account}" --role "roles/compute.networkAdmin" --no-user-output-enabled
  gcloud projects remove-iam-policy-binding ${project} --member "serviceAccount:${pcf_service_account}" --role "roles/compute.storageAdmin" --no-user-output-enabled
  gcloud projects remove-iam-policy-binding ${project} --member "serviceAccount:${pcf_service_account}" --role "roles/storage.admin" --no-user-output-enabled
  gcloud projects remove-iam-policy-binding ${project} --member "serviceAccount:${pcf_service_account}" --role "roles/cloudsql.admin" --no-user-output-enabled
  gcloud projects remove-iam-policy-binding ${project} --member "serviceAccount:${pcf_service_account}" --role "roles/dns.admin" --no-user-output-enabled
  gcloud projects remove-iam-policy-binding ${project} --member "serviceAccount:${pcf_service_account}" --role "roles/compute.securityAdmin" --no-user-output-enabled

  pcf_key_id=`jq --raw-output '.private_key_id' "${pcf_key_file}"`
  gcloud iam service-accounts --project "${project}" keys delete "${pcf_key_id}"  --iam-account "${pcf_service_account}"
  gcloud iam service-accounts --project "${project}" delete "${pcf_service_account}" --no-user-output-enabled
}

if [ $# -gt 0 ]; then
  while [ $# -gt 0 ]; do
    case $1 in
      service_accounts | accounts | security )
        service_accounts
        ;;
      buckets | bucket | tfstate )
        buckets
        ;;
      prepare_concourse | prepare )
        prepare_concourse
        ;;
      concourse_login | login )
        concourse_login
        ;;
      download)
        download
        ;;
      secrets )
        secrets
        ;;
      params )
        params
        ;;
      pipeline | pipelines )
        pipeline
        ;;
      install )
        install
        ;;
      deploy )
        download
        pipeline
        install
        ;;
      firewall)
        firewall
        ;;
      modernize_pipeline | modernize)
        modernize_pipeline
        ;;
      bootstrap_terraform | bootstrap)
        bootstrap_terraform
        ;;
      create_infrastructure | infrastructure)
        create_infrastructure
        ;;
      configure_director | director | opsman)
        configure_director
        ;;
      wipe_env | wipe)
        wipe_env
        ;;
      dns)
        dns
        ;;
      ldap)
        ldap
        ;;
      safe_auth)
        safe_auth
        ;;
      get_secret | password | secret)
        get_deploy_secret "${2}"
        shift
        ;;
      team_secret)
        get_team_secret "${2}"
        shift
        ;;
      get_credential | credential)
        get_credential "${2}" "${3}" "${4}"
        shift 3
        ;;
      trigger)
        trigger "${2}"
        shift
        ;;
      hijack)
        hijack "${2}"
        shift
        ;;
      start )
        start
        ;;
      stop )
        stop
        ;;
      teardown)
        teardown
        ;;
      tunnel)
        tunnel
        ;;
      om)
        shift
        exec_om $@
        exit
        ;;
      exec)
        shift
        opsman_exec $@
        exit
        ;;
      * )
        echo "Unrecognized option: $1" 1>&2
        exit 1
        ;;
    esac
    shift
  done
  exit
fi

service_accounts
prepare_concourse
concourse_login
buckets
download
secrets
params
pipeline
install
ldap
