#!/usr/bin/env bash
BASEDIR=$(dirname $(dirname $0))
. "${BASEDIR}/lib/env.sh"

# allow for iaas customizations
if [ -f ${lib_dir}/${iaas}/prepare.sh ] ; then
  . ${lib_dir}/${iaas}/prepare.sh
fi

set -e

if [ ! -d ${workdir} ] ; then
  mkdir -p ${workdir}
fi

if [ ! -d ${key_dir} ] ; then
  mkdir -p ${key_dir}
fi

if [ ! -d ${state_dir} ] ; then
  mkdir -p ${state_dir}
fi

plugins () {
  local terraform_plugin_dir="${state_dir}/terraform/.terraform/plugins/darwin_amd64"
  curl -qks -o ${workdir}/terraform-provider-acme_v1.0.0_darwin_amd64.zip https://github.com/vancluever/terraform-provider-acme/releases/download/v1.0.0/terraform-provider-acme_v1.0.0_darwin_amd64.zip
  if [ ! -d ${terraform_plugin_dir} ] ; then
    mkdir -p ${terraform_plugin_dir}
  fi;
  unzip -d ${terraform_plugin_dir} ${workdir}/terraform-provider-acme_v1.0.0_darwin_amd64.zip
}

trust() {
  # golang commands don't love Let's Encrypt
  wget -O ${ca_cert_file} https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt
}

plan() {
  if [ -n "$(type -t pre_plan)" ] ; then
    pre_plan
  fi

  # N.B: This will create concourse load balancers before we need them. Annoys me but it's painful
  #      to do it later. See about a PR to the team for it.
  bbl plan --state-dir ${state_dir} --debug --lb-type concourse
}

patch() {
  local job="bootstrap"
  cp -r ${patch_dir}/${iaas}/${job}/. ${state_dir}

  cat <<TFVARS > ${state_dir}/vars/${job}.tfvars
domain="${domain}"
bootstrap_domain="${subdomain}"
bootstrap_domain_token="${subdomain}"
dns_ttl="${dns_ttl}"
key_dir="${key_dir}"
email="${email}"
TFVARS
}

director() {
  echo "Creating the $env_id BOSH director..."
  bbl up --state-dir ${state_dir} --debug
  env_id=$(bbl env-id --state-dir ${state_dir})

  if [ -n "$(type -t pre_plan)" ] ; then
    post_director
  fi
}

client() {
  echo "Configuring BOSH client for the $env_id director..."
  eval "$(bbl print-env)"
  # store the ssh key for easy use
  if [ -f ${key_dir}/id_jumpbox_${env_id}.pem ] ; then
    chmod 600 ${key_dir}/id_jumpbox_${env_id}.pem
  fi
  bbl ssh-key --state-dir ${state_dir} > ${key_dir}/id_jumpbox_${env_id}.pem
  chmod 400 ${key_dir}/id_jumpbox_${env_id}.pem

  bosh_ca_cert=$(bbl director-ca-cert --state-dir ${state_dir})
  bosh_director_address=$(bbl director-address --state-dir ${state_dir})
  bosh alias-env --environment="${bosh_director_address}" --ca-cert="${bosh_ca_cert}" $(bbl env-id --state-dir ${state_dir})
}

login() {
  echo "Logging into the $env_id director..."
  eval "$(bbl print-env)"
  bosh log-in -e $(bbl env-id --state-dir ${state_dir}) --client="${BOSH_CLIENT}" --client-secret="${BOSH_CLIENT_SECRET}"
}

if [ $# -gt 0 ]; then
  while [ $# -gt 0 ]; do
    case $1 in
      plugins )
        plugins
        ;;
      trust )
        trust
        ;;
      plan )
        plan
        ;;
      patch )
        patch
        ;;
      director )
        director
        ;;
      firewall )
        firewall
        ;;
      client )
        client
        ;;
      login )
        login
        ;;
      * )
        echo "Unrecognized option: $1" 1>&2
        exit 1
        ;;
    esac
    shift
  done
  exit
fi

plugins
trust
plan
patch
director
client
login
