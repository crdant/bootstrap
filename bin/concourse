#!/usr/bin/env bash

BASEDIR=$(dirname $(dirname $0))
. "${BASEDIR}/lib/env.sh"
. "${BASEDIR}/lib/generate_passphrase.sh"
. "${BASEDIR}/lib/secrets.sh"
. "${BASEDIR}/lib/certificates.sh"

stemcell_version=3468.15
stemcell_checksum=1788c8dafbb93e16ca3637f8c84052a0218675f0
concourse_version=3.13.0
concourse_checksum=aaa4e4d42adb2293abc79422351ca71ed548f95c
garden_version=1.13.1
garden_checksum=54cbb89cae1be0708aa056185671665d7f4b2a4f
postgres_version=28
postgres_checksum=c1fcec62cb9d2e95e3b191e3c91d238e2b9d23fa

concourse_host="concourse.${subdomain}"
concourse_url="https://${concourse_host}"
concourse_user=admin

concourse_cert_cn="${concourse_host}"
export concourse_cert_file=${ca_dir}/${concourse_host}/cert.pem
export concourse_key_file=${ca_dir}/${concourse_host}/privkey.pem
export concourse_chain_file=${ca_dir}/${concourse_host}/chain.pem

ssl_certificates () {
  echo "Creating SSL certificate..."

  common_name="${concourse_host}"
  org_unit="${env_id} Platform Automation"

  create_certificate ${common_name} --domain "${concourse_host}"
}

stemcell () {
  bosh -e "${env_id}" upload-stemcell https://bosh.io/d/stemcells/bosh-${stemcell_iaas}-ubuntu-trusty-go_agent?v=${stemcell_version}
}

releases () {
  bosh -e "${env_id}" upload-release https://bosh.io/d/github.com/concourse/concourse?v=${concourse_version} --sha1 ${concourse_checksum}
  bosh -e "${env_id}" upload-release https://bosh.io/d/github.com/cloudfoundry/garden-runc-release?v=${garden_version} --sha1 ${garden_checksum}
  bosh -e "${env_id}" upload-release https://bosh.io/d/github.com/cloudfoundry/postgres-release?v=${postgres_version} --sha1 ${postgres_checksum}
}

safe_auth () {
  safe_auth_bootstrap
}

vars () {
  atc_vault_token=`jq --raw-output '.auth.client_token' ${key_dir}/atc-${env_id}-token.json`
  vault_cert_file=${ca_dir}/vault.${subdomain}/cert.pem
  concourse_password=solo # "$(safe get secret/bootstrap/concourse/admin:value)"
  cat <<VAR_ARGUMENTS
    --var concourse-url="${concourse_url}" --var concourse-user=${concourse_user} --var concourse-password=${concourse_password}
    --var-file atc-cert-file=${concourse_cert_file} --var-file atc-key-file=${concourse_key_file}
    --var atc-vault-token=${atc_vault_token}  --var-file vault-cert-file=${vault_cert_file}
VAR_ARGUMENTS
}

interpolate () {
  local manifest=${manifest_dir}/concourse.yml
  bosh interpolate "${manifest}" `vars`
}

patch () {
  local job="concourse"
  set -x
  bbl plan --state-dir ${state_dir} --lb-type concourse
  cp -r ${patch_dir}/${iaas}/${job}/terraform/. ${state_dir}/terraform

  cat <<TFVARS > ${state_dir}/vars/${job}.tfvars
concourse_host="${concourse_host}"
TFVARS

}

infra () {
  bbl up --state-dir ${state_dir}
}

deploy () {
  local manifest=${manifest_dir}/concourse.yml
  admin_password=`generate_passphrase 4`
  safe_auth_bootstrap
  safe set secret/bootstrap/concourse/admin value="${admin_password}"
  bosh -n -e "${env_id}" -d concourse deploy "${manifest}" `vars`
}

login () {
  jq --raw-output '.auth.client_token' ${key_dir}/bootstrap-${env_id}-token.json | safe auth token
  concourse_password=`safe get secret/bootstrap/concourse/admin:value`
  fly --target ${env_id} login --team-name main --ca-cert ${ca_cert_file} --concourse-url=${concourse_url} --username=${concourse_user} --password=${concourse_password}
}

url () {
  echo ${concourse_url}
}

stop () {
  bosh -e $env_id
  bosh -n -e ${env_id} -d concourse update-resurrection off
  for cid in `bosh -n -e ${env_id} -d concourse vms --json | jq --raw-output '.Tables[].Rows[].vm_cid'`; do
    bosh -n -e ${env_id} -d concourse delete-vm ${cid}
  done
}

start () {
  deploy
  bosh -n -e ${env_id} -d concourse update-resurrection on
}

teardown () {
  bosh -n -e "${env_id}" -d concourse delete-deployment

  # delete load balancer in DNS
  local transaction_file="${workdir}/dns-transaction-${dns_zone}.xml"
  gcloud dns record-sets --project "${project}" transaction start -z "${dns_zone}" --transaction-file="${transaction_file}" --no-user-output-enabled
  lb_address=`gcloud compute --project ${project} forwarding-rules describe ${env_id}-concourse-https --region ${region} --format json | jq --raw-output '.IPAddress'`
  gcloud dns record-sets --project ${project} transaction remove -z "${dns_zone}" --name "${concourse_host}" --ttl "${dns_ttl}" --type A "${lb_address}" --transaction-file="${transaction_file}"
  gcloud dns record-sets --project ${project} transaction execute -z "${dns_zone}" --transaction-file="${transaction_file}"
}


modernize_pipeline() {
  local pipeline_file=${1}
  sed -i -e 's/{{/((/g' "${pipeline_file}"
  sed -i -e 's/}}/))/g' "${pipeline_file}"
}

if [ $# -gt 0 ]; then
  while [ $# -gt 0 ]; do
    case $1 in
      certificates )
        ssl_certificates
        ;;
      security )
        ssl_certificates
        ;;
      stemcell )
        stemcell
        ;;
      release | releases )
        releases
        ;;
      deploy )
        deploy
        ;;
      upgrade )
        stemcell
        releases
        deploy
        ;;
      patch )
        patch
        ;;
      infra )
        infra
        ;;
      init )
        ;;
      login )
        login
        ;;
      start )
        start
        ;;
      stop )
        stop
        ;;
      teardown )
        teardown
        ;;
      url )
        url
        ;;
      interpolate )
        interpolate
        ;;
      modernize | modernize_pipeline )
        modernize_pipeline ${2}
        shift
        ;;
      safe_auth | auth )
        safe_auth
        ;;
      * )
        echo "Unrecognized option: $1" 1>&2
        exit 1
        ;;
    esac
    shift
  done
  exit
fi

ssl_certificates
stemcell
releases
patch
infra
deploy
login
