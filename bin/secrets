#!/usr/bin/env bash
BASEDIR=$(dirname $(dirname $0))
. "${lib_dir}/env.sh"
. "${lib_dir}/${iaas}/secrets.sh"
. "${lib_dir}/certificates.sh"

env_id=`bbl env-id --state-dir ${state_dir}`
stemcell_version=3431.13
stemcell_checksum=8ae6d01f01f627e70e50f18177927652a99a4585

vault_version=0.6.2
vault_checksum=36fd3294f756372ff9fbbd6dfac11fe6030d02f9
vault_host="vault.${subdomain}"
vault_static_ip=10.0.31.195
vault_port=8200
vault_access_cidr="0.0.0.0/0"
vault_addr=https://${vault_host}:${vault_port}

export vault_cert_file=${ca_dir}/${vault_host}/cert.pem
export vault_key_file=${ca_dir}/${vault_host}/privkey.pem

ssl_certificates () {
  echo "Creating SSL certificate..."

  common_name="${vault_host}"
  org_unit="${env_id} Secrets Management"

  create_certificate ${common_name} --domain "${vault_host}"
}

stemcell () {
  https://s3.amazonaws.com/bosh-aws-light-stemcells/light-bosh-stemcell-3541.12--ubuntu-trusty-go_agent.tgz
  bosh -n -e ${env_id} upload-stemcell https://bosh.io/d/stemcells/bosh-${stemcell_iaas}-ubuntu-trusty-go_agent?v=${stemcell_version}
}

releases () {
  bosh -n -e ${env_id} upload-release https://bosh.io/d/github.com/cloudfoundry-community/vault-boshrelease?v=${vault_version} --sha1 ${vault_checksum}
}

interpolate () {
  local manifest=${manifest_dir}/vault.yml
  bosh interpolate ${manifest} --var vault-static-ip="${vault_static_ip}" --var-file vault-cert="${vault_cert_file}" --var-file vault-key="${vault_key_file}"
}

update_cloud_config () {
  bosh interpolate \
    -v env-id="${env_id}" \
    -v job="vault" etc/add-lb.yml > ${state_dir}/cloud-config/add-vault-lb.yml

  ops_file_args="$(find ${state_dir}/cloud-config/*.yml ! -name cloud-config.yml ! -name ops.yml | sort | sed 's/^/-o /' | xargs)"

  bosh update-cloud-config -o ${state_dir}/cloud-config/ops.yml \
    ${ops_file_args} \
    -l ${state_dir}/vars/cloud-config-vars.yml \
    ${state_dir}/cloud-config/cloud-config.yml
}

deploy () {
  local manifest=${manifest_dir}/vault.yml
  bosh -n -e ${env_id} -d vault deploy ${manifest} \
    --var vault-static-ip="${vault_static_ip}" --var vault-addr=${vault_addr} --var-file vault-cert="${vault_cert_file}" --var-file vault-key="${vault_key_file}"
}

unseal() {
  # unseal the vault
  vault unseal --address ${vault_addr} --ca-cert=${vault_cert_file} `jq -r '.keys_base64[0]' ${key_dir}/vault_secrets.json`
  vault unseal --address ${vault_addr} --ca-cert=${vault_cert_file} `jq -r '.keys_base64[1]' ${key_dir}/vault_secrets.json`
  vault unseal --address ${vault_addr} --ca-cert=${vault_cert_file} `jq -r '.keys_base64[2]' ${key_dir}/vault_secrets.json`
}

init () {
  # initialize the vault using the API directly to parse the JSON
  initialization=`cat ${etc_dir}/vault_init.json`
  curl -qks --cacert ${vault_cert_file} -X PUT "${vault_addr}/v1/sys/init" -H "Accept: application/json" -H "Content-Type: application/json" -d "${initialization}" | jq '.' >${key_dir}/vault_secrets.json
  unseal
}

stop () {
  bosh -n -e ${env_id} -d vault update-resurrection off
  for cid in `bosh -n -e ${env_id} -d vault vms --json | jq --raw-output '.Tables[].Rows[].vm_cid'`; do
    bosh -n -e ${env_id} -d vault delete-vm ${cid}
  done
}

start () {
  deploy
  bosh -n -e ${env_id} -d vault update-resurrection on
}

teardown () {
  bosh -n -e ${env_id} -d vault delete-deployment
  teardown_infra
}

if [ $# -gt 0 ]; then
  while [ $# -gt 0 ]; do
    case $1 in
      certificates )
        ssl_certificates
        ;;
      security )
        ssl_certificates
        ;;
      stemcell )
        stemcell
        ;;
      release )
        release
        ;;
      interpolate )
        interpolate
        ;;
      lbs )
        lbs
        update_cloud_config
        ;;
      dns )
        dns
        ;;
      cloud_config )
        update_cloud_config
        ;;
      deploy )
        deploy
        ;;
      firewall )
        firewall
        update_cloud_config
        ;;
      tunnel )
        tunnel
        ;;
      init )
        init
        ;;
      start )
        start
        ;;
      stop )
        stop
        ;;
      unseal )
        unseal
        ;;
      teardown )
        teardown
        ;;
      * )
        echo "Unrecognized option: $1" 1>&2
        exit 1
        ;;
    esac
    shift
  done
  exit
fi

ssl_certificates
stemcell
releases
lbs
dns
firewall
update_cloud_config
deploy
init
