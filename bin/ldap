#!/usr/bin/env bash
BASEDIR=$(dirname $(dirname $0))
. "${BASEDIR}/lib/env.sh"
. "${BASEDIR}/lib/generate_passphrase.sh"
. "${BASEDIR}/lib/certificates.sh"

stemcell_version=3431.13

ldap_release_repository=https://github.com/cloudfoundry-community/openldap-boshrelease.git
ldap_host="ldap.${subdomain}"
ldap_static_ip=10.0.47.195

export ldap_cert_file=${ca_dir}/${ldap_host}/cert.pem
export ldap_key_file=${ca_dir}/${ldap_host}/privkey.pem

# ldap_static_ip=10.244.0.2
ldap_port=636

ssl_certificates () {
  echo "Creating SSL certificate..."

  common_name="${ldap_host}"

  create_certificate ${common_name} --domain ${ldap_host}
}

stemcell () {
  bosh -n -e ${env_id} upload-stemcell https://bosh.io/d/stemcells/bosh-${stemcell_iaas}-ubuntu-trusty-go_agent?v=${stemcell_version}
}

patch() {
  local job="ldap"

  cp -r ${patch_dir}/${iaas}/${job}/terraform/. ${state_dir}/terraform

  for ops_file in $(find ${patch_dir}/${iaas}/${job}/cloud-config -name '*.yml' );
  do
    bosh interpolate -v env-id="${env_id}" -v job="${job}" ${ops_file} > ${state_dir}/cloud-config/$(basename $ops_file)
  done

  cat <<TFVARS > ${state_dir}/vars/${job}.tfvars
ldap_host="${ldap_host}"
ldap_port="${ldap_port}"
TFVARS
}

infra() {
  bbl up --state-dir ${state_dir} --debug
}

clone_release () {
  if [ ! -d ${workdir}/pcf_pipelines ] ; then
    git clone ${ldap_release_repository} ${workdir}/openldap-boshrelease
  else
    pushd ${workdir}/pcf_pipelines
    git pull ${ldap_release_repository}
    popd
  fi
}

releases () {
  clone_release
  pushd ${workdir}/openldap-boshrelease
    bosh -n create-release && bosh -n -e ${env_id} upload-release
  popd
}


safe_auth () {
  jq --raw-output '.auth.client_token' ${key_dir}/bootstrap-${env_id}-token.json | safe auth token
}

convert_domain () {
  local ipDomain=${1}
  echo "dc=${ipDomain}" | sed 's/\./,dc=/g'
}

vars () {
  safe_auth

  ldap_olc_suffix=`convert_domain ${domain}`
  ldap_olc_root_dn="cn=admin,${ldap_olc_suffix}"
  ldap_olc_root_password=`safe get secret/bootstrap/ldap/admin:value`

  if [ -z "${ldap_olc_root_password}" ] ; then
    safe set secret/bootstrap/ldap/admin value=`generate_passphrase 4`
    ldap_olc_root_password=`safe get secret/bootstrap/ldap/admin:value`
  fi
}

interpolate () {
  local manifest=${manifest_dir}/ldap.yml

  vars
  bosh interpolate ${manifest} \
    --var olc-suffix="${ldap_olc_suffix}" --var olc-root-dn="${ldap_olc_root_dn}" --var olc-root-password="${ldap_olc_root_password}" --var ldap-static-ip="${ldap_static_ip}" \
    --var-file ldap-cert="${ldap_cert_file}" --var-file ldap-key="${ldap_key_file}"
}

deploy () {
  local manifest=${manifest_dir}/ldap.yml

  vars
  bosh -n -e ${env_id} -d openldap deploy ${manifest} \
    --var olc-suffix="${ldap_olc_suffix}" --var olc-root-dn="${ldap_olc_root_dn}" --var olc-root-password="${ldap_olc_root_password}" --var ldap-static-ip="${ldap_static_ip}" \
    --var-file ldap-cert="${ldap_cert_file}" --var-file ldap-key="${ldap_key_file}"
}

firewall() {
  gcloud --project "${project}" compute firewall-rules create "${env_id}-ldap" --allow="tcp:${ldap_port}" --source-ranges="0.0.0.0/0" --target-tags="ldap" --network="${env_id}-network "
}

binddn () {
  ldap_olc_suffix=`convert_domain ${domain}`
  echo "cn=admin,${ldap_olc_suffix}"
}

url () {
  echo "ldaps://${ldap_host}:${ldap_port}"
}

stop () {
  bosh -n -e ${env_id} -d openldap update-resurrection off
  for cid in `bosh -n -e ${env_id} -d openldap vms --json | jq --raw-output '.Tables[].Rows[].vm_cid'`; do
    bosh -n -e ${env_id} -d openldap delete-vm ${cid}
  done
}

start () {
  deploy
  bosh -n -e ${env_id} -d openldap update-resurrection on
}

teardown () {
  bosh -n -e ${env_id} -d openldap delete-deployment
  gcloud --project "${project}" compute firewall-rules delete "${env_id}-ldap"
}

if [ $# -gt 0 ]; then
  while [ $# -gt 0 ]; do
    case $1 in
      certificates )
        ssl_certificates
        ;;
      security )
        ssl_certificates
        ;;
      stemcell )
        stemcell
        ;;
      release | releases )
        releases
        ;;
      interpolate )
        interpolate
        ;;
      deploy )
        deploy
        ;;
      url )
        url
        ;;
      binddn )
        binddn
        ;;
      patch )
        patch
        ;;
      cloud-config )
        update_cloud_config
        ;;
      infra )
        infra
        ;;
      convert )
        domain_string="${2}"
        shift;
        convert_domain ${domain_string}
        ;;
      start )
        start
        ;;
      stop )
        stop
        ;;
      teardown )
        teardown
        ;;
      * )
        echo "Unrecognized option: $1" 1>&2
        exit 1
        ;;
    esac
    shift
  done
  exit
fi

ssl_certificates
stemcell
releases
patch
infra
deploy
